[
    {
        "Question": "In which of these situations are interfaces better than abstract classes?",
        "OptionModel": [
            {
                "Answer": "When you need to define an object type's characteristics, use an interface. When you need to define an object type's capabilities, use an abstract class.",
                "Choice": false
            },
            {
                "Answer": "Interfaces are a legacy of older versions of C#, and are interchangeable with the newer abstract class feature.",
                "Choice": false
            },
            {
                "Answer": "When you need a list of capabilities and data that are classes-agnostic, use an interface. When you need a certain object type to share characteristics, use an abstract class.",
                "Choice": false
            },
            {
                "Answer": " You should use both an interface and an abstract class when defining any\r\ncomplex object.",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "Which statement is true of delegates?",
        "OptionModel": [
            {
                "Answer": "Delegates are not supported in the current version of C#",
                "Choice": false
            },
            {
                "Answer": "They cannot be used as callbacks.",
                "Choice": false
            },
            {
                "Answer": "Only variables can be passed to delegates as parameters",
                "Choice": false
            },
            {
                "Answer": "They can be chained together.",
                "Choice": false
            }
        ],
        "Answer": 3
    },
    {
        "Question": "Which choice best defines C#'s asynchronous programming model?",
        "OptionModel": [
            {
                "Answer": "reactive",
                "Choice": false
            },
            {
                "Answer": "inherited callback",
                "Choice": false
            },
            {
                "Answer": "task-based",
                "Choice": false
            },
            {
                "Answer": "callback-based",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "How would you determine if a class has a particular attribute?",
        "OptionModel": [
            {
                "Answer": "var type = typeof(SomeType);\nvar attribute = type.GetCustomAttribute<SomeAttribute>();\n",
                "Choice": false
            },
            {
                "Answer": "var typeof(MyPresentationModel).Should().BeDecoratedWith<SomeAttribute>();",
                "Choice": false
            },
            {
                "Answer": "Attribute.GetCustomAttribute, typeof(SubControllerActionToViewDataAttribute);",
                "Choice": false
            },
            {
                "Answer": "Attribute.GetCustomAttribute(typeof(ExampleController), typeof(SubControllerActionToViewDataAttribute));",
                "Choice": false
            }
        ],
        "Answer": 3
    },
    {
        "Question": "What is the difference between the ref and out keywords?",
        "OptionModel": [
            {
                "Answer": "Variables passed to out specify that the parameter is an output parameter, while ref specifies that a variable may be passed to a function without being initialized.",
                "Choice": false
            },
            {
                "Answer": "Variables passed to ref can be passed to a function without being initialized, while out specifies that the value is a reference value that can be changed inside the calling method.",
                "Choice": false
            },
            {
                "Answer": "Variables passed to out can be passed to a function without being initialized, while ref specifies that the value is a reference value that can be changed inside the calling method.",
                "Choice": false
            },
            {
                "Answer": "Variables passed to ref specify that the parameter is an output parameter, while out specifies that a variable may be passed to a function without being initialized.",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "How could you retrieve information about a class, as well as create an instance at runtime?",
        "OptionModel": [
            {
                "Answer": "reflection",
                "Choice": false
            },
            {
                "Answer": "serialization",
                "Choice": false
            },
            {
                "Answer": "abstraction",
                "Choice": false
            },
            {
                "Answer": "dependency injection",
                "Choice": false
            }
        ],
        "Answer": 0
    },
    {
        "Question": "What is this code an example of?\r\n \r\n\tprivate static object objA;\r\n\tprivate static object objB;\r\n\r\n\tprivate static void performTaskA()\r\n\t{\r\n\t\tlock (obj)\r\n\t\t{\r\n\t\t\tThread.Sleep(1000);\r\n\t\t\tlock (objA) { }\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static void PerformTaskB()\r\n\t{\r\n\t\tlock (objA)\r\n\t\t{\r\n\t\t\tlock (objB) { }\r\n\t\t}\r\n\t}",
        "OptionModel": [
            {
                "Answer": "a private class that uses multithreading",
                "Choice": false
            },
            {
                "Answer": "multithread coding",
                "Choice": false
            },
            {
                "Answer": "thread mismanagement",
                "Choice": false
            },
            {
                "Answer": "a potential deadlock",
                "Choice": false
            }
        ],
        "Answer": 3
    },
    {
        "Question": "What is the difference between an anonymous type and a regular data type?",
        "OptionModel": [
            {
                "Answer": "Anonymous types don't have type names",
                "Choice": false
            },
            {
                "Answer": "Anonymous types can only be static",
                "Choice": false
            },
            {
                "Answer": "Anonymous types can be used only in struts",
                "Choice": false
            },
            {
                "Answer": "Anonymous types don't work with LINQ.",
                "Choice": false
            }
        ],
        "Answer": 0
    },
    {
        "Question": "When would you use a Dictionary rather that an Array type in your application?",
        "OptionModel": [
            {
                "Answer": "when you need a jagged collection structure",
                "Choice": false
            },
            {
                "Answer": "when you need to store values of the same type",
                "Choice": false
            },
            {
                "Answer": "when you need to store key-value pairs rather than single values",
                "Choice": false
            },
            {
                "Answer": "when you need an ordered, searchable list",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "What is the difference between a.Equals(b) and a == b?",
        "OptionModel": [
            {
                "Answer": "The .Equals method compares reference identities while the == compares contents.",
                "Choice": false
            },
            {
                "Answer": "The .Equals method compares primitive values while == compares all values.",
                "Choice": false
            },
            {
                "Answer": "The .Equals method compares contents while == compares references reference identity.",
                "Choice": false
            },
            {
                "Answer": "The .Equals method compares reference type while == compares primitive value types.",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "Which choice best describes a deadlock situation?",
        "OptionModel": [
            {
                "Answer": "when you try to instantiate two objects at the same time in the same class or struct",
                "Choice": false
            },
            {
                "Answer": "when you are trying to execute an action after a user event is registered",
                "Choice": false
            },
            {
                "Answer": "when simultaneous instructions are waiting on each other to finish before executing",
                "Choice": false
            },
            {
                "Answer": "when you try to execute a series of events simultaneously on multiple threads",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "How does the async keyword work?",
        "OptionModel": [
            {
                "Answer": "It allows access to asynchronous methods in the C# API",
                "Choice": false
            },
            {
                "Answer": "It allows thread pooling and synchronous processes in static classes.",
                "Choice": false
            },
            {
                "Answer": "It allows the await keyword to be used in a method",
                "Choice": false
            },
            {
                "Answer": "It allows access to synchronous methods in the C# API",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "What is an object in C#?",
        "OptionModel": [
            {
                "Answer": "a class or struct, including its variables and functions",
                "Choice": false
            },
            {
                "Answer": "a primitive data type that can be created only at compile time",
                "Choice": false
            },
            {
                "Answer": "a value type that can be used only with an abstract class",
                "Choice": false
            },
            {
                "Answer": "an instance of a class or struct that includes fields, properties, and/or methods",
                "Choice": false
            }
        ],
        "Answer": 3
    },
    {
        "Question": "Which code snippet declares an anonymous type named usedData?",
        "OptionModel": [
            {
                "Answer": "var userData = new UserData(\"John\", 32 );",
                "Choice": false
            },
            {
                "Answer": "var userData = new { name = \"John\", age = 32 };",
                "Choice": false
            },
            {
                "Answer": "AType userData = new AType { name = \"John\", age = 32 };",
                "Choice": false
            },
            {
                "Answer": "Anonymous userData = new Anonymous { name = \"John\", age = 32 };",
                "Choice": false
            }
        ],
        "Answer": 1
    },
    {
        "Question": "What will be returned when this method is executed?\n public void userInput(string charParamters) { }",
        "OptionModel": [
            {
                "Answer": "nothing",
                "Choice": false
            },
            {
                "Answer": "a Boolean",
                "Choice": false
            },
            {
                "Answer": "a string variable",
                "Choice": false
            },
            {
                "Answer": "an integer",
                "Choice": false
            }
        ],
        "Answer": 0
    },
    {
        "Question": "What is stored on the Heap?",
        "OptionModel": [
            {
                "Answer": "int",
                "Choice": false
            },
            {
                "Answer": "enum",
                "Choice": false
            },
            {
                "Answer": "reference type",
                "Choice": false
            },
            {
                "Answer": "long",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "In what order would the employee names in this example be printed to the console?\r\n\r\n string[] employees = { \"Joe\", \"Bob\", \"Carol\", \"Alice\", \"Will\" }; \r\n IEnumerable<string> employeeQuery = from person in employees orderby person select person;\r\n foreach(string employee in employeeQuery) \r\n {  \r\n\tConsole.WriteLine(employee);  \r\n }",
        "OptionModel": [
            {
                "Answer": "ascending",
                "Choice": false
            },
            {
                "Answer": "unordered",
                "Choice": false
            },
            {
                "Answer": "descending",
                "Choice": false
            },
            {
                "Answer": "first in, first out",
                "Choice": false
            }
        ],
        "Answer": 0
    },
    {
        "Question": "Lambda expressions are often used in tandem with which of the following?",
        "OptionModel": [
            {
                "Answer": "Namespaces",
                "Choice": false
            },
            {
                "Answer": "LINQ",
                "Choice": false
            },
            {
                "Answer": "Type Aliasing",
                "Choice": false
            },
            {
                "Answer": "Assemblies",
                "Choice": false
            }
        ],
        "Answer": 1
    },
    {
        "Question": "What is the correct formatting for single line and multiline comments?",
        "OptionModel": [
            {
                "Answer": "// - Single Line / - Multiline",
                "Choice": false
            },
            {
                "Answer": "// Multiline /_ Single Line _/",
                "Choice": false
            },
            {
                "Answer": "//* Multiline / Single Line",
                "Choice": false
            },
            {
                "Answer": "// Single Line /* Multiline */",
                "Choice": false
            }
        ],
        "Answer": 3
    },
    {
        "Question": "How do you make a method in an abstract class overridable?",
        "OptionModel": [
            {
                "Answer": "Make it public",
                "Choice": false
            },
            {
                "Answer": "Make it static",
                "Choice": false
            },
            {
                "Answer": "Make it private",
                "Choice": false
            },
            {
                "Answer": "Make it virtual",
                "Choice": false
            }
        ],
        "Answer": 3
    },
    {
        "Question": "How would you write code for an integer property called Age with a getter and setter?",
        "OptionModel": [
            {
                "Answer": "public int Age { get - set }",
                "Choice": false
            },
            {
                "Answer": "public int Age: get set;",
                "Choice": false
            },
            {
                "Answer": "public int Age (get, set );",
                "Choice": false
            },
            {
                "Answer": "public int Age { get; set; }",
                "Choice": false
            }
        ],
        "Answer": 3
    },
    {
        "Question": "What is an abstract class?",
        "OptionModel": [
            {
                "Answer": "a class that is denoted by the class keyword (can be seen and used by any other class in the system--thus it is by default public)",
                "Choice": false
            },
            {
                "Answer": "something denoted by the abstract keyword and used system wide; if you want any program to create an object of a class you use the abstract class",
                "Choice": false
            },
            {
                "Answer": "a class that is denoted by the virtual keyword",
                "Choice": false
            },
            {
                "Answer": "a class that can be used only as base class",
                "Choice": false
            }
        ],
        "Answer": 3
    },
    {
        "Question": "When using a thread pool what happens to a given thread after it finishes its task?",
        "OptionModel": [
            {
                "Answer": "The thread is destroyed and memory is freed up.",
                "Choice": false
            },
            {
                "Answer": "The thread runs in loop until the next assignment.",
                "Choice": false
            },
            {
                "Answer": "The thread goes inactive in the background and waits for garbage collection.",
                "Choice": false
            },
            {
                "Answer": "The thread returns to the pool for reuse.",
                "Choice": false
            }
        ],
        "Answer": 3
    },
    {
        "Question": "Which choice represents a class that inherits behavior from a base class?",
        "OptionModel": [
            {
                "Answer": "a second base class",
                "Choice": false
            },
            {
                "Answer": "a revised class",
                "Choice": false
            },
            {
                "Answer": "a derived class",
                "Choice": false
            },
            {
                "Answer": "a parent class",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "What does operator overloading allow you to do?",
        "OptionModel": [
            {
                "Answer": "hide built-in operatores when necessary",
                "Choice": false
            },
            {
                "Answer": "add methods to be interpreted by the compiler at runtime",
                "Choice": false
            },
            {
                "Answer": "define how enums and other primitive value types work within the rest of the application",
                "Choice": false
            },
            {
                "Answer": "define custom functionality for common operators like addition and equality",
                "Choice": false
            }
        ],
        "Answer": 3
    },
    {
        "Question": "What it the main purpose of LINQ?",
        "OptionModel": [
            {
                "Answer": "to delete duplicate data",
                "Choice": false
            },
            {
                "Answer": "ti bind namespaces and assemblies",
                "Choice": false
            },
            {
                "Answer": "to query and transform data",
                "Choice": false
            },
            {
                "Answer": "to connect assemblies",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "What is the correct syntax for a new generic list of strings named contacts?",
        "OptionModel": [
            {
                "Answer": "public List contact = new List();",
                "Choice": false
            },
            {
                "Answer": "public List(string names) contacts = new List(string names)();",
                "Choice": false
            },
            {
                "Answer": "var contacts = new List();",
                "Choice": false
            },
            {
                "Answer": "var contacts = new List(string);",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "What is the difference between throw exceptions and throw clauses?",
        "OptionModel": [
            {
                "Answer": "Throw clauses fire only at runtime, while throw exceptions can fire at any time.",
                "Choice": false
            },
            {
                "Answer": "Throw exceptions overwrite the stack trace, while throw clauses retain the stack information.",
                "Choice": false
            },
            {
                "Answer": "Throw clauses overwrite the stack trace, while throw exceptions retain the stack information.",
                "Choice": false
            },
            {
                "Answer": "Throw exceptions fire only at runtime, while throw clauses can fire during compile",
                "Choice": false
            }
        ],
        "Answer": 1
    },
    {
        "Question": "When an asynchronous method is executed, the code runs but nothing happens other than a compiler warning. What is most likely causing the method to not return anything?",
        "OptionModel": [
            {
                "Answer": "The return yield statement is missing at the end of the method.",
                "Choice": false
            },
            {
                "Answer": "The method is missing an await keyword in its body.",
                "Choice": false
            },
            {
                "Answer": "The wait keyword is missing from the end of the method.",
                "Choice": false
            },
            {
                "Answer": "The yield keyword is missing from the method.",
                "Choice": false
            }
        ],
        "Answer": 1
    },
    {
        "Question": "What are C# events?",
        "OptionModel": [
            {
                "Answer": " system actions that communicate directly with the compiler at runtime",
                "Choice": false
            },
            {
                "Answer": "actions that execute when the code compiles, generating logs and test output",
                "Choice": false
            },
            {
                "Answer": "actions that generate notifications, which are sent to their registered listeners** <= Correct",
                "Choice": false
            },
            {
                "Answer": "user-only methods that send data to the application's back end",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "What kind of values can arrays store?",
        "OptionModel": [
            {
                "Answer": "unordered collections of numerc values",
                "Choice": false
            },
            {
                "Answer": "key-value pairs of any C# supported type",
                "Choice": false
            },
            {
                "Answer": "class and struct instances",
                "Choice": false
            },
            {
                "Answer": "multiple variables, or collections, of the same type",
                "Choice": false
            }
        ],
        "Answer": 3
    },
    {
        "Question": "Given this enumeration, how would you access the integer-type value of 'AppState.Loading'?\n enum AppState { OffLine, Loading, Ready }",
        "OptionModel": [
            {
                "Answer": "string currentState = (string)AppState.Loading;",
                "Choice": false
            },
            {
                "Answer": "string currentState = AppState.Loading.integralVal;",
                "Choice": false
            },
            {
                "Answer": "int currentState = AppState.Loading.rawValue;",
                "Choice": false
            },
            {
                "Answer": "int currentState = (int)AppState.Loading;",
                "Choice": false
            }
        ],
        "Answer": 3
    },
    {
        "Question": "What character would you use to start a regular expression pattern at a word boundary?",
        "OptionModel": [
            {
                "Answer": "d",
                "Choice": false
            },
            {
                "Answer": "\\a",
                "Choice": false
            },
            {
                "Answer": "\\b",
                "Choice": false
            },
            {
                "Answer": "\\w",
                "Choice": false
            }
        ],
        "Answer": 3
    },
    {
        "Question": "To conform to the following interface, which of its members need to be\r\nimplemented?\r\n\r\n\tpublic interface INameble\r\n\t{\r\n\t\tstring FirstName { get; set; }\r\n\t\tstring LastName { get; }\r\n\t}",
        "OptionModel": [
            {
                "Answer": "Both the FirstName and LastName properties need to be implemented.",
                "Choice": false
            },
            {
                "Answer": "Neither, they are both optional.",
                "Choice": false
            },
            {
                "Answer": "Only the LastName property needs to be implemented.",
                "Choice": false
            },
            {
                "Answer": "Only the FirstName property needs to be implemented.",
                "Choice": false
            }
        ],
        "Answer": 0
    },
    {
        "Question": "You're dealing with multiple assemblies in your program, but are worried about memory allocation. At what point in the program life cycle are assemblies loaded into memory?",
        "OptionModel": [
            {
                "Answer": "at runtime",
                "Choice": false
            },
            {
                "Answer": "at compile time",
                "Choice": false
            },
            {
                "Answer": "only when required",
                "Choice": false
            },
            {
                "Answer": "only when programmatically loaded",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "What is most accurate description of a regular expression?",
        "OptionModel": [
            {
                "Answer": "A regular expression is a C# tool used to parse HTML",
                "Choice": false
            },
            {
                "Answer": "A regular expression is a special text string for describing a search patters.",
                "Choice": false
            },
            {
                "Answer": "A regular expression allows a variable to be passed by reference.",
                "Choice": false
            },
            {
                "Answer": "A regular expression allows a class to conform to the Equatable protocol.",
                "Choice": false
            }
        ],
        "Answer": 1
    },
    {
        "Question": "Why would you use a class field in C#",
        "OptionModel": [
            {
                "Answer": "To define behaviours of the class",
                "Choice": false
            },
            {
                "Answer": "To hold information and data contained in the class object",
                "Choice": false
            },
            {
                "Answer": "To communicate between classes and object",
                "Choice": false
            },
            {
                "Answer": "To store the class definition value",
                "Choice": false
            }
        ],
        "Answer": 1
    },
    {
        "Question": "When would you use generics in your code?",
        "OptionModel": [
            {
                "Answer": "to increase code performance",
                "Choice": false
            },
            {
                "Answer": "all of these answers",
                "Choice": false
            },
            {
                "Answer": "when code reuse is a priority",
                "Choice": false
            },
            {
                "Answer": "when type safety is important",
                "Choice": false
            }
        ],
        "Answer": 1
    },
    {
        "Question": "What prints to the console when this code is executed?\r\n\r\n\tpublic delegate void AuthCallback(bool validUser);\r\n\tpublic static AuthCallback loginCallback : Login;\r\n\t\r\n\tpublic static void Login()\r\n\t{\r\n\t\tConsole.WriteLine(\"Valid user!\");\r\n\t}\r\n\t\r\n\tpublic static void Main(string[] args) { loginCallback(true); }",
        "OptionModel": [
            {
                "Answer": "Login successful...",
                "Choice": false
            },
            {
                "Answer": "Valid user!",
                "Choice": false
            },
            {
                "Answer": "an error, because the method signature of Login doesn't match the delegate. It will throw an error because you cant apply Inheritance to methods that way.",
                "Choice": false
            },
            {
                "Answer": "Login successful... Valid user!",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "How would you declare a sealed class named User?",
        "OptionModel": [
            {
                "Answer": "public class User",
                "Choice": false
            },
            {
                "Answer": "abstract User {}",
                "Choice": false
            },
            {
                "Answer": "sealed class User",
                "Choice": false
            },
            {
                "Answer": "private sealed class User",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "How would you write a delegeate named ResultCallback with an int parameter named responseCode?",
        "OptionModel": [
            {
                "Answer": "public delegate void ResultCallback<(int) responseCode> ;",
                "Choice": false
            },
            {
                "Answer": "public delegate ResultCallback(int responseCode) ;",
                "Choice": false
            },
            {
                "Answer": "public delegate void ResultCallback(int responseCode) ;",
                "Choice": false
            },
            {
                "Answer": "public void delegate ResultCallback<int responseCode> ;",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "What is the difference between non-static and static classes?",
        "OptionModel": [
            {
                "Answer": "non-static classes need to be initialized before use, while static classes do not reference",
                "Choice": false
            },
            {
                "Answer": " non-static classes are accessible only from an interface while static classes are accessible from anywhere",
                "Choice": false
            },
            {
                "Answer": "non-static classes need to initialize all class members at runtime, while static classes do not",
                "Choice": false
            },
            {
                "Answer": "non-static classes do not need to be initialized while static classes do",
                "Choice": false
            }
        ],
        "Answer": 0
    },
    {
        "Question": "Which characteristic prevents this code from compiling?\n public int age=\"28\"",
        "OptionModel": [
            {
                "Answer": "type safety",
                "Choice": false
            },
            {
                "Answer": "single inheritance",
                "Choice": false
            },
            {
                "Answer": "dependency injection",
                "Choice": false
            },
            {
                "Answer": "multiple inheritance",
                "Choice": false
            }
        ],
        "Answer": 0
    },
    {
        "Question": "How would you serialize this class?\n public class User {}",
        "OptionModel": [
            {
                "Answer": "mark the User class with the DeserializableAttribute",
                "Choice": false
            },
            {
                "Answer": "Declare it as public serializable class User {}",
                "Choice": false
            },
            {
                "Answer": "Mark it with the SerializableAttribute",
                "Choice": false
            },
            {
                "Answer": "Declare it as private serializable class User{}",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "What is the difference between a static and non-static method?",
        "OptionModel": [
            {
                "Answer": "non-static methods always need to have a void return type",
                "Choice": false
            },
            {
                "Answer": "non-static methods do not have access to static member variables",
                "Choice": false
            },
            {
                "Answer": "static methods do not have to instantiate an instance of the class to call the method",
                "Choice": false
            },
            {
                "Answer": "static methods always have to be public",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "What is the correct way to write an event named apiResult based on a delegate named ResultCallback?",
        "OptionModel": [
            {
                "Answer": "public void event ResultCallback apiResult;",
                "Choice": false
            },
            {
                "Answer": "public event ResultCallback(() -> apiResult);",
                "Choice": false
            },
            {
                "Answer": "public event void ResultCallback",
                "Choice": false
            },
            {
                "Answer": "public event ResultCallback apiResult;",
                "Choice": false
            }
        ],
        "Answer": 3
    },
    {
        "Question": "When will the code inside finally block be executed in a try-catch statement?",
        "OptionModel": [
            {
                "Answer": "if there is an error, it won't execute at all",
                "Choice": false
            },
            {
                "Answer": "between the try and catch blocks",
                "Choice": false
            },
            {
                "Answer": "after the try and catch blocks",
                "Choice": false
            },
            {
                "Answer": "when the finally block overrides the catch block and executes in its place",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "What method correctly extends the string class?",
        "OptionModel": [
            {
                "Answer": "public static string IsvalidName(this string i, string value) {}",
                "Choice": false
            },
            {
                "Answer": "public static void IsvalidName(this string i, string value) {}",
                "Choice": false
            },
            {
                "Answer": "public string IsvalidName(this string i, string value) {}",
                "Choice": false
            },
            {
                "Answer": "public void IsvalidName(this string i, string value) {}",
                "Choice": false
            }
        ],
        "Answer": 0
    },
    {
        "Question": "C# class can inherit multiple?",
        "OptionModel": [
            {
                "Answer": "Classes",
                "Choice": false
            },
            {
                "Answer": "Interfaces",
                "Choice": false
            },
            {
                "Answer": "Abstract Classes",
                "Choice": false
            },
            {
                "Answer": "Static Classes",
                "Choice": false
            }
        ],
        "Answer": 1
    },
    {
        "Question": "Which of following are value types in C#?",
        "OptionModel": [
            {
                "Answer": "Int32",
                "Choice": false
            },
            {
                "Answer": "Double",
                "Choice": false
            },
            {
                "Answer": "Decimal",
                "Choice": false
            },
            {
                "Answer": "All of the above",
                "Choice": false
            }
        ],
        "Answer": 3
    },
    {
        "Question": "Which of the following is a reference type in C#",
        "OptionModel": [
            {
                "Answer": "String",
                "Choice": false
            },
            {
                "Answer": "Long",
                "Choice": false
            },
            {
                "Answer": "Boolean",
                "Choice": false
            },
            {
                "Answer": "None of the above",
                "Choice": false
            }
        ],
        "Answer": 0
    },
    {
        "Question": "What is a nullable type?",
        "OptionModel": [
            {
                "Answer": "It allows assignment of null to reference type",
                "Choice": false
            },
            {
                "Answer": "It allows assignment of null to value type",
                "Choice": false
            },
            {
                "Answer": "It allows assignment of null to static class",
                "Choice": false
            },
            {
                "Answer": "None of the above",
                "Choice": false
            }
        ],
        "Answer": 1
    },
    {
        "Question": "Struct is a?",
        "OptionModel": [
            {
                "Answer": "Reference type",
                "Choice": false
            },
            {
                "Answer": "Value type",
                "Choice": false
            },
            {
                "Answer": "Class type",
                "Choice": false
            },
            {
                "Answer": "String type",
                "Choice": false
            }
        ],
        "Answer": 1
    },
    {
        "Question": "10 > 9 ? \"10 is greater than 9\" : \"9 is greater than 10\" is an example of?",
        "OptionModel": [
            {
                "Answer": "Ternary operator",
                "Choice": false
            },
            {
                "Answer": "Conditional operator",
                "Choice": false
            },
            {
                "Answer": "Greater than operator",
                "Choice": false
            },
            {
                "Answer": "Inverse operator",
                "Choice": false
            }
        ],
        "Answer": 0
    },
    {
        "Question": "Which of the following datatype can be used with enum?",
        "OptionModel": [
            {
                "Answer": "int",
                "Choice": false
            },
            {
                "Answer": "string",
                "Choice": false
            },
            {
                "Answer": "boolean",
                "Choice": false
            },
            {
                "Answer": "All of the above",
                "Choice": false
            }
        ],
        "Answer": 0
    },
    {
        "Question": "What is a indexer?",
        "OptionModel": [
            {
                "Answer": "It allows an instance of a class to be indexed like an array",
                "Choice": false
            },
            {
                "Answer": "It allows enumerator with class",
                "Choice": false
            },
            {
                "Answer": "It creates index for instances of a class",
                "Choice": false
            },
            {
                "Answer": "None of the above",
                "Choice": false
            }
        ],
        "Answer": 0
    },
    {
        "Question": "String data type is?",
        "OptionModel": [
            {
                "Answer": "Mutable",
                "Choice": false
            },
            {
                "Answer": "Immutable",
                "Choice": false
            },
            {
                "Answer": "Static",
                "Choice": false
            },
            {
                "Answer": "Value type",
                "Choice": false
            }
        ],
        "Answer": 1
    },
    {
        "Question": "An array in C# starts with ___ index.",
        "OptionModel": [
            {
                "Answer": "1",
                "Choice": false
            },
            {
                "Answer": "0",
                "Choice": false
            },
            {
                "Answer": "-1",
                "Choice": false
            },
            {
                "Answer": "None of the above",
                "Choice": false
            }
        ],
        "Answer": 1
    },
    {
        "Question": "Which of the following is the right way of declaring an array?",
        "OptionModel": [
            {
                "Answer": "int[] intArray = new int[];",
                "Choice": false
            },
            {
                "Answer": "int intArray[] = new int[5];",
                "Choice": false
            },
            {
                "Answer": "int[] intArray = new int[5];",
                "Choice": false
            },
            {
                "Answer": "int[5] intArray = new int[];",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "Which of the following is true for Readonly variables?",
        "OptionModel": [
            {
                "Answer": "Value will be assigned at runtime",
                "Choice": false
            },
            {
                "Answer": "Value will be assigned at compile time",
                "Choice": false
            },
            {
                "Answer": "Value will be assigned when it accessed first time",
                "Choice": false
            },
            {
                "Answer": "None of the above",
                "Choice": false
            }
        ],
        "Answer": 0
    },
    {
        "Question": "Which of the following statement is true?",
        "OptionModel": [
            {
                "Answer": "try block must be followed by catch or finally block or both",
                "Choice": false
            },
            {
                "Answer": "finally block cannot include a return statement",
                "Choice": false
            },
            {
                "Answer": "try block can include another try block",
                "Choice": false
            },
            {
                "Answer": "All of the above",
                "Choice": false
            }
        ],
        "Answer": 3
    },
    {
        "Question": "Which of the following statement is true?",
        "OptionModel": [
            {
                "Answer": "A finally block may not execute every time",
                "Choice": false
            },
            {
                "Answer": "A  return or break statement cannot exit a finally block",
                "Choice": false
            },
            {
                "Answer": "A finally block can come before catch block",
                "Choice": false
            },
            {
                "Answer": "Multiple finally block is possible",
                "Choice": false
            }
        ],
        "Answer": 1
    },
    {
        "Question": "Func and Action are the types of?",
        "OptionModel": [
            {
                "Answer": "Utility function",
                "Choice": false
            },
            {
                "Answer": "Delegate",
                "Choice": false
            },
            {
                "Answer": "Event",
                "Choice": false
            },
            {
                "Answer": "Generic class",
                "Choice": false
            }
        ],
        "Answer": 1
    },
    {
        "Question": "Return type of Predicate<T>() is always a?",
        "OptionModel": [
            {
                "Answer": "int",
                "Choice": false
            },
            {
                "Answer": "string",
                "Choice": false
            },
            {
                "Answer": "boolean",
                "Choice": false
            },
            {
                "Answer": "void",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "A partial class allows?",
        "OptionModel": [
            {
                "Answer": "Implementation of a single class in multiple .cs files",
                "Choice": false
            },
            {
                "Answer": "Declaration of multiple classes in a single .cs file",
                "Choice": false
            },
            {
                "Answer": "Implementation of multiple interfaces to single class",
                "Choice": false
            },
            {
                "Answer": "Multiple class inheritance",
                "Choice": false
            }
        ],
        "Answer": 0
    },
    {
        "Question": "LINQ stands for?",
        "OptionModel": [
            {
                "Answer": "Language Intergrated Query",
                "Choice": false
            },
            {
                "Answer": "Local Intergration Query",
                "Choice": false
            },
            {
                "Answer": "Language Included Query",
                "Choice": false
            },
            {
                "Answer": "Lazy Intergrated Query",
                "Choice": false
            }
        ],
        "Answer": 0
    },
    {
        "Question": "Data type of a variable declared using var will be assigned at?",
        "OptionModel": [
            {
                "Answer": "Runtime",
                "Choice": false
            },
            {
                "Answer": "Compile time",
                "Choice": false
            },
            {
                "Answer": "CLR time",
                "Choice": false
            },
            {
                "Answer": "Application Initialization time",
                "Choice": false
            }
        ],
        "Answer": 1
    },
    {
        "Question": "Which of the following is true for dynamic type in C#?",
        "OptionModel": [
            {
                "Answer": "It allows multiple time declaration of a variable",
                "Choice": false
            },
            {
                "Answer": "It allows compile time type checking",
                "Choice": false
            },
            {
                "Answer": "It escapes compile time type checking",
                "Choice": false
            },
            {
                "Answer": "None of the above",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "What is a correct syntax to output \"Hello World\" in C#?",
        "OptionModel": [
            {
                "Answer": "Console.WriteLine(\"Hello World\"); ",
                "Choice": false
            },
            {
                "Answer": "System.out.println(\"Hello World\");",
                "Choice": false
            },
            {
                "Answer": "cout << \"Hello World\";",
                "Choice": false
            },
            {
                "Answer": "print (\"Hello World\");",
                "Choice": false
            }
        ],
        "Answer": 0
    },
    {
        "Question": "C# is an alias of C++ ?",
        "OptionModel": [
            {
                "Answer": "True",
                "Choice": false
            },
            {
                "Answer": "False",
                "Choice": false
            }
        ],
        "Answer": 1
    },
    {
        "Question": "How do you insert COMMENTS in C# code?",
        "OptionModel": [
            {
                "Answer": " # This is a comment",
                "Choice": false
            },
            {
                "Answer": "// This is a comment  ",
                "Choice": false
            },
            {
                "Answer": "/* This is a comment",
                "Choice": false
            },
            {
                "Answer": "\\\\ This is a coment",
                "Choice": false
            }
        ],
        "Answer": 1
    },
    {
        "Question": "Which data type is used to create a variable that should store text?",
        "OptionModel": [
            {
                "Answer": "myString",
                "Choice": false
            },
            {
                "Answer": "str",
                "Choice": false
            },
            {
                "Answer": "string",
                "Choice": false
            },
            {
                "Answer": "txt",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "How do you create a variable with the numeric value 5?",
        "OptionModel": [
            {
                "Answer": "int x = 5;  ",
                "Choice": false
            },
            {
                "Answer": "x = 5;",
                "Choice": false
            },
            {
                "Answer": "double x = 5;",
                "Choice": false
            },
            {
                "Answer": "num x = 5",
                "Choice": false
            }
        ],
        "Answer": 0
    },
    {
        "Question": "How do you create a variable with the floating number 2.8?",
        "OptionModel": [
            {
                "Answer": "int x = 2.8;",
                "Choice": false
            },
            {
                "Answer": "byte x = 2.8;",
                "Choice": false
            },
            {
                "Answer": "int x = 2.8D;",
                "Choice": false
            },
            {
                "Answer": "double x = 2.8D;",
                "Choice": false
            }
        ],
        "Answer": 3
    },
    {
        "Question": "Which property can be used to find the length of a string?",
        "OptionModel": [
            {
                "Answer": "getLength()",
                "Choice": false
            },
            {
                "Answer": "Length ",
                "Choice": false
            },
            {
                "Answer": "length",
                "Choice": false
            },
            {
                "Answer": "length()",
                "Choice": false
            }
        ],
        "Answer": 1
    },
    {
        "Question": "Which operator is used to add together two values?",
        "OptionModel": [
            {
                "Answer": "The & sign",
                "Choice": false
            },
            {
                "Answer": "The * sign",
                "Choice": false
            },
            {
                "Answer": "The + sign",
                "Choice": false
            },
            {
                "Answer": "The - sign",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "The value of a string variable can be surrounded by single quotes?",
        "OptionModel": [
            {
                "Answer": "True",
                "Choice": false
            },
            {
                "Answer": "False",
                "Choice": false
            }
        ],
        "Answer": 0
    },
    {
        "Question": "Type casting is when you assign a value of one data type to another type?",
        "OptionModel": [
            {
                "Answer": "True",
                "Choice": false
            },
            {
                "Answer": "False",
                "Choice": false
            }
        ],
        "Answer": 0
    },
    {
        "Question": "Which operator can be used to compare two values?",
        "OptionModel": [
            {
                "Answer": "><",
                "Choice": false
            },
            {
                "Answer": "==",
                "Choice": false
            },
            {
                "Answer": "<>",
                "Choice": false
            },
            {
                "Answer": "=",
                "Choice": false
            }
        ],
        "Answer": 1
    },
    {
        "Question": "To declare an array in C#, define the variable type with:",
        "OptionModel": [
            {
                "Answer": "()",
                "Choice": false
            },
            {
                "Answer": "{}",
                "Choice": false
            },
            {
                "Answer": "[]",
                "Choice": false
            },
            {
                "Answer": "<>",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "What is the correct way to create an object called myObj of MyClass?",
        "OptionModel": [
            {
                "Answer": "class myObj = new MyClass();",
                "Choice": false
            },
            {
                "Answer": "class MyClass = new myObj();",
                "Choice": false
            },
            {
                "Answer": "new myObj = MyClass();",
                "Choice": false
            },
            {
                "Answer": "MyClass myObj = new MyClass();    ",
                "Choice": false
            }
        ],
        "Answer": 3
    },
    {
        "Question": "What is the name of the 'special' class that represents a group of constants?",
        "OptionModel": [
            {
                "Answer": "void",
                "Choice": false
            },
            {
                "Answer": "special",
                "Choice": false
            },
            {
                "Answer": "enum",
                "Choice": false
            },
            {
                "Answer": "const",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "Which statement is used to stop a loop?",
        "OptionModel": [
            {
                "Answer": "return",
                "Choice": false
            },
            {
                "Answer": "break",
                "Choice": false
            },
            {
                "Answer": "stop",
                "Choice": false
            },
            {
                "Answer": "exit",
                "Choice": false
            }
        ],
        "Answer": 1
    },
    {
        "Question": "What is a Tuple in C#?",
        "OptionModel": [
            {
                "Answer": "a data structure that contains a sequence of elements of different data types.",
                "Choice": false
            },
            {
                "Answer": "a data structure that only allows elements of the same type.",
                "Choice": false
            },
            {
                "Answer": "an array that can contain only primitive data types.",
                "Choice": false
            },
            {
                "Answer": "a collection to store different variables in multiple locations.",
                "Choice": false
            }
        ],
        "Answer": 0
    },
    {
        "Question": "What is the correct way to declare and initialize a tuple variable?",
        "OptionModel": [
            {
                "Answer": "a list of objects that can be accessed by index.",
                "Choice": false
            },
            {
                "Answer": "[double, int]t1 = {4.5, 3};",
                "Choice": false
            },
            {
                "Answer": "<double, int>t1 = (4.5, 3);",
                "Choice": false
            },
            {
                "Answer": "(double, int) t1 = (4.5, 3);",
                "Choice": false
            },
            {
                "Answer": "Tuple(double, int) t1 = (1, 4.5);",
                "Choice": false
            }
        ],
        "Answer": 2
    },
    {
        "Question": "What is the difference between Managed code vs Unmanaged code in C#?",
        "OptionModel": [
            {
                "Answer": "Managed code is code that is clean and easy to read. Unmanaged code is messy and hard to understand",
                "Choice": false
            },
            {
                "Answer": "Managed code is a code whose execution is managed by Common Language Runtime, while Unmanaged code is not",
                "Choice": false
            },
            {
                "Answer": "Managed code is keeping your code into classes, methods and fields. Unmanaged code is keeping everything in a single .cs file",
                "Choice": false
            },
            {
                "Answer": "Managed code is using the safe keyword for classes and methods. Unmanaged code is run by default",
                "Choice": false
            }
        ],
        "Answer": 1
    },
    {
        "Question": "In C# 7.3. What does the following 'is expression' do? \r\n\r\n\tif (input is int count)\r\n\t\tsum += count;",
        "OptionModel": [
            {
                "Answer": "the code is checking to see if input is equal to count, if so, it adds to the sum",
                "Choice": false
            },
            {
                "Answer": "if input has the same address as count, if so, it will add to the sum",
                "Choice": false
            },
            {
                "Answer": "the code checks if input is the same type and value of count, if so, it adds to sum",
                "Choice": false
            },
            {
                "Answer": "the code checks if a variable is an int, and if so, adds it to the current sum",
                "Choice": false
            }
        ],
        "Answer": 3
    }
]